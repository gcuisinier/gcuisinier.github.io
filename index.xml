<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gildas Cuisinier</title>
    <link>https://gcuisinier.github.io/index.xml</link>
    <description>Recent content on Gildas Cuisinier</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 09:08:11 +0100</lastBuildDate>
    <atom:link href="https://gcuisinier.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>jEnv : Java Environment Manager</title>
      <link>https://gcuisinier.github.io/projects/jenv/</link>
      <pubDate>Thu, 02 Mar 2017 09:08:11 +0100</pubDate>
      
      <guid>https://gcuisinier.github.io/projects/jenv/</guid>
      <description>&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_project_information&#34;&gt;Project information&lt;/h3&gt;
&lt;table class=&#34;tableblock frame-all grid-all spread&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 28.5714%;&#34;&gt;
&lt;col style=&#34;width: 71.4286%;&#34;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div&gt;&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jenv.be&#34; class=&#34;bare&#34;&gt;https://www.jenv.be&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Source&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div&gt;&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.github.com/gcuisinier/jenv&#34; class=&#34;bare&#34;&gt;https://www.github.com/gcuisinier/jenv&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;&lt;strong&gt;Stars&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;div&gt;&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/gcuisinier/jenv.svg&#34; alt=&#34;Company Logo&#34; height=&#34;16&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_what_s_jenv&#34;&gt;What&amp;#8217;s jEnv ?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;jEnv is a command line tool to help you forget how to set the JAVA_HOME environment variable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_quick_start&#34;&gt;Quick start&lt;/h3&gt;

&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_installation&#34;&gt;1. Installation&lt;/h3&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/gcuisinier/jenv.git ~/.jenv&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;or on a Mac :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install jenv&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_enabling_jenv_in_your_shell&#34;&gt;2. Enabling jEnv in your shell&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Bash&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ echo &#39;export PATH=&#34;$HOME/.jenv/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bash_profile
$ echo &#39;eval &#34;$(jenv init -)&#34;&#39; &amp;gt;&amp;gt; ~/.bash_profile&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Zsh&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ echo &#39;export PATH=&#34;$HOME/.jenv/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc
$ echo &#39;eval &#34;$(jenv init -)&#34;&#39; &amp;gt;&amp;gt; ~/.zshrc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_configuration_of_jdks_installation&#34;&gt;3. Configuration of JDKs Installation&lt;/h3&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ jenv add /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
  oracle64-1.6.0.39 added
$ jenv add /Library/Java/JavaVirtualMachines/jdk17011.jdk/Contents/Home
  oracle64-1.7.0.11 added&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_usage&#34;&gt;4. Usage&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can configure a global (default one) JDKs :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jenv global 1.7&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But also by directory (and so, by project) :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jenv local 1.6&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This will add a &lt;code&gt;.java-version&lt;/code&gt; file in this directory&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And if you want to have the &lt;code&gt;JAVA_HOME&lt;/code&gt; environment variable set automatically, you just have to enable the &lt;strong&gt;export plugin&lt;/strong&gt; :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jenv enable-plugin export&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;jEnv can also manage the JAVA_OPTS, MAVEN_OPTS !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://gcuisinier.github.io/about/</link>
      <pubDate>Wed, 01 Mar 2017 10:47:53 +0100</pubDate>
      
      <guid>https://gcuisinier.github.io/about/</guid>
      <description>&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_software_engineer&#34;&gt;Software Engineer&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have been a professional developer since 2006 after graduating with a Bacherlor degree from Haute Ecole Rennequin Sualem Ã  Seraing (INPRES).
I mainly develop in Java, and I quickly find a real interest in the development of framework or development tools to improve the quality and the development speed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_speaker&#34;&gt;Speaker&lt;/h3&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Framework 3.0 / Spring Framework 3.1&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BreizhJUG / &lt;a href=&#34;http://www.lorrainejug.org/2009/10/01/soir%C3%A9e-spring.html&#34;&gt;LorraineJUG&lt;/a&gt; / MarsJUG (&lt;a href=&#34;https://fr.slideshare.net/gcuisinier/marsjug-spring-30-10636076&#34;&gt;slides&lt;/a&gt;) / YaJUG&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring XML est mort, Vive Spring NoXML&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.parisjug.org/xwiki/wiki/oldversion/view/Meeting/20121113&#34;&gt;ParisJUG&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/watch?v=SLNs_NYkuKk&#34;&gt;video&lt;/a&gt; / &lt;a href=&#34;https://fr.slideshare.net/gcuisinier/springltxml-est-mort-vive-spring-noxml&#34;&gt;slides&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Devoxx France 2012 (&lt;a href=&#34;https://www.slideshare.net/gcuisinier/spring-est-mort-vive-spring-devoxx-france&#34;&gt;slides&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Les 5 mercenaires du DevOps&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Devoxx France 2012 (&lt;a href=&#34;https://www.youtube.com/watch?v=S6BigliKhOY&#34;&gt;video&lt;/a&gt; ; &lt;a href=&#34;https://fr.slideshare.net/dbaeli/devoxx-devops-university2012&#34;&gt;slides&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quoi de neuf, Docker?&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.wajug.be/talk/2016/quoi-de-neuf-docker&#34;&gt;WaJUG&lt;/a&gt; (&lt;a href=&#34;https://speakerdeck.com/gcuisinier/wajug-introduction-a-docker&#34;&gt;slides&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BrownBagLunches (presentation on demand inside companies)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jEnv&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;VoxxedDays Luxembourg 2016 (&lt;a href=&#34;https://fr.slideshare.net/GildasCuisinier/jenvbe-voxxeddays&#34;&gt;slides&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_conference_organizer&#34;&gt;Conference organizer&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://www.yajug.lu&#34;&gt;YaJUG&lt;/a&gt; / &lt;a href=&#34;http://www.meetup.com/fr-FR/Docker-Luxembourg/&#34;&gt;Docker Meetup&lt;/a&gt; / &lt;a href=&#34;https://voxxeddays.com/luxembourg/&#34;&gt;VoxxedDays Luxembourg&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Analysing HTTP trafic with MITMProxy</title>
      <link></link>
      <pubDate>Wed, 01 Mar 2017 10:47:53 +0100</pubDate>
      
      <guid></guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_tldr&#34;&gt;tldr;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If you need to sniffing HTTP, first run the MITMProxy (and his companion MITMWeb) thank to Docker&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;# test
docker run --rm -it -p 8080:8080 -p 127.0.0.1:8081:8081 mitmproxy/mitmproxy mitmweb --web-iface 0.0.0.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;// File: User.groovy
class User {
    String username
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;CREATE TABLE USER (
    ID INT NOT NULL,
    USERNAME VARCHAR(40) NOT NULL
);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Les agents Java</title>
      <link></link>
      <pubDate>Fri, 15 Jun 2012 08:00:00 +0100</pubDate>
      
      <guid></guid>
      <description>&lt;p&gt;Les Agents Java ? Pas la moindre idÃ©e de ce que c&amp;rsquo;est ?
Mais si, vous en avez certainement dÃ©ja vu, ils se cachent dans la ligne de commande Java via ce paramÃ¨tre &lt;code&gt;-javaagent:vers/mon/agent.jar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ceux-ci interviennent lors du chargement des classes par un classloader, et ont la possiblitÃ© de venir modifier la classe en cours de chargement. Ce mÃ©canisme est utilisÃ© par divers outils et frameworks :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AspectJ pour faire du tissage d&amp;rsquo;Aspect au chargement&lt;/li&gt;
&lt;li&gt;Par des outils de Profiling pour venir ajouter du code permettant de tracer les appels&lt;/li&gt;
&lt;li&gt;&amp;hellip; et plein d&amp;rsquo;autres&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting started !&lt;/h2&gt;

&lt;p&gt;Pour mieux comprendre comment fonctionne un agent, le plus simple est de tenter d&amp;rsquo;en faire un simple.&lt;/p&gt;

&lt;h3 id=&#34;crÃ©er-la-classe-de-l-agent&#34;&gt;CrÃ©er la classe de l&amp;rsquo;agent&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package be.hikage.agent;

import java.lang.instrument.Instrumentation;

public class AgentSimple {

	public static void premain(String agentArgument, Instrumentation instrumentation){		
		System.out.println(&amp;quot;Hello, Agent Smith ! [ &amp;quot; + agentArgument + &amp;quot;]&amp;quot;);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La mÃ©thode &lt;code&gt;premain(String agentArgument, Instrumentation instrumentation)&lt;/code&gt; est pour un agent ce qu&amp;rsquo;est la mÃ©thode &lt;code&gt;main(String &amp;hellip; arguments)&lt;/code&gt; est pour une application Java.&lt;/p&gt;

&lt;p&gt;Cette mÃ©thode appelÃ©e lors du chargement de l&amp;rsquo;agent, et possÃ¨de deux arguments :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String agentArguments&lt;/code&gt; : Ce sont les options passÃ©e en paramÃ¨tre dans la ligne de commande pour l&amp;rsquo;agent. &lt;code&gt;-javaagent:jarpath=parametre&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Instrumentation instrumentation&lt;/code&gt;, est un service qui va fournir des mÃ©thodes pour modifier les classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;prÃ©parer-le-packaging&#34;&gt;PrÃ©parer le packaging&lt;/h3&gt;

&lt;p&gt;Mais avoir la classe ne suffit pas pour avoir un agent utilisable. En effet, un agent doit obligatoirement un jar, avec un manifest correctement configurÃ©.&lt;/p&gt;

&lt;p&gt;Celui-ci doit contenir une entrÃ©e &lt;code&gt;Premain-Class&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Manifest-Version: 1.0
Premain-Class: be.hikage.agent.AgentSimple
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;tester-l-agent&#34;&gt;Tester l&amp;rsquo;Agent&lt;/h3&gt;

&lt;p&gt;Une fois le &lt;strong&gt;Jar&lt;/strong&gt; prÃªt, il faut le tester. Pour cela crÃ©er un petit programme simple :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TestMain {

	public static void main(String[] args) {
		System.out.println(&amp;quot;Mon Programme&amp;quot;);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et lanÃ§ons celui-ci en fournissant l&amp;rsquo;agent :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ java -javaagent:AgentSimple.jar=&amp;quot;Mes paramÃ¨tres&amp;quot; be.hikage.agent.TestMain
Hello, Agent Smith ! [ Mes paramÃ¨tres]
Mon Programme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On remarque que l&amp;rsquo;agent est bien lancÃ© avant l&amp;rsquo;application, et qu&amp;rsquo;il a bien reÃ§u les paramÃ¨tres que l&amp;rsquo;on lui a fourni.&lt;/p&gt;

&lt;h2 id=&#34;interception-des-chargements-de-classes&#34;&gt;Interception des chargements de classes&lt;/h2&gt;

&lt;p&gt;Voyons maintenant Ã  quoi sert le deuxiÃ¨me paramÃ¨tre fourni Ã  la mÃ©thode &lt;em&gt;Premain&lt;/em&gt; : Instrumentation.
La principale fonctionnalitÃ© de celui-ci est de permettre d&amp;rsquo;enregistrer un &lt;em&gt;ClassFileTransformer&lt;/em&gt;. Cette interface oblige Ã  implÃ©menter une unique mÃ©thode :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;byte[]
    transform(  ClassLoader         loader,
                String              className,
                Class            classBeingRedefined,
                ProtectionDomain    protectionDomain,
                byte[]              classfileBuffer)
        throws IllegalClassFormatException;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le premier paramÃ¨tre Ã©tant le classloader impliquÃ© pour le chargement de la classe. Les deux suivant, le nom de la classe et l&amp;rsquo;instance de Class reprÃ©sentant la classe en train d&amp;rsquo;Ãªtre chargÃ©e.
Le dernier est le bytecode brut de la classe, sous la forme d&amp;rsquo;un tableau de bytes.&lt;/p&gt;

&lt;p&gt;Modifions maintenant notre agent pour afficher les classes en cours de chargement :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package be.hikage.agent;

import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.lang.instrument.Instrumentation;
import java.security.ProtectionDomain;

public class AgentSimple {

	public static void premain(String agentArgument, Instrumentation instrumentation){		
		System.out.println(&amp;quot;Hello, Agent Smith ! [ &amp;quot; + agentArgument + &amp;quot;]&amp;quot;);

        instrumentation.addTransformer( new ClassFileTransformer() {
            @Override
            public byte[] transform(ClassLoader loader, String className, Class&amp;lt;?&amp;gt; classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
                System.out.println(&amp;quot;Tu es en train de charger la classe :&amp;quot; + className);
                return classfileBuffer;
            }
        });
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le rÃ©sultat sera le suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Hello, Agent Smith ! [ Mes paramÃ¨tres]
Tu es en train de charger la classe : sun/launcher/LauncherHelper
Tu es en train de charger la classe : java/lang/Enum
Tu es en train de charger la classe : be/hikage/agent/TestMain
Tu es en train de charger la classe : java/lang/Void
Mon Programme
Tu es en train de charger la classe : java/lang/Shutdown
Tu es en train de charger la classe : java/lang/Shutdown$Lock
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;modification-de-classe&#34;&gt;Modification de classe&lt;/h2&gt;

&lt;p&gt;Passons maintenant la seconde, et tentons de venir modifier les classes en cours de chargement afin d&amp;rsquo;avoir des statistiques sur le nombre d&amp;rsquo;instance.
Pour cela, il suffit d&amp;rsquo;ajouter un champ statique qui servira de compteur, et de modifier les constructeurs pour y ajouter une incrÃ©mentation de celui-ci ainsi que de l&amp;rsquo;afficher dans les logs.&lt;/p&gt;

&lt;p&gt;Pour cela, il faut utiliser un outil de manipulation de bytecode tels que &lt;a href=&#34;http://www.jboss.org/javassist&#34;&gt;Javassist&lt;/a&gt;.
Voici une implÃ©mentation d&amp;rsquo;un ClassFileTransformer possible :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package be.hikage.agent;

import javassist.ClassPool;
import javassist.CtBehavior;
import javassist.CtClass;
import javassist.CtField;

import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.security.ProtectionDomain;

public class CountInstanceTransformer implements ClassFileTransformer {


    @Override
    public byte[] transform(ClassLoader loader, String className, Class&amp;lt;?&amp;gt; classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
        return visitClass(className, classBeingRedefined, classfileBuffer);

    }

    private byte[] visitClass(String className, Class&amp;lt;?&amp;gt; classBeingRedefined, byte[] classfileBuffer) {
        ClassPool pool = ClassPool.getDefault();
        CtClass cl = null;
        try {
            cl = pool.makeClass(new java.io.ByteArrayInputStream(classfileBuffer));
            if (cl.isInterface() == false) {

                // Ajout d&#39;un champ static dans la classe
                CtField field = CtField.make(&amp;quot;private static long _instanceCount;&amp;quot;, cl);

                cl.addField(field);

                CtBehavior[] constructors = cl.getDeclaredConstructors();
                for (int i = 0; i &amp;lt; constructors.length; i++) {
                    // On incrÃ©mente le compteur et on l&#39;affiche
                    constructors[i].insertAfter(&amp;quot;_instanceCount++;&amp;quot;);
                    constructors[i].insertAfter(&amp;quot;System.out.println(\&amp;quot;&amp;quot; + className + &amp;quot; : \&amp;quot; + _instanceCount);&amp;quot;);


                }

                // GÃ©nÃ©ration du bytecode modifiÃ©
                classfileBuffer = cl.toBytecode();
            }
        } catch (Exception e) {
            e.printStackTrace();

        } finally {
            if (cl != null) {
                cl.detach();
            }
        }
        return classfileBuffer;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et un petit programme de tests :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TestMain {

	public static void main(String[] args) {
		System.out.println(&amp;quot;Mon Programme&amp;quot;);
        List test = new ArrayList();
        test.add(new MonObject()) ;
        test.add(new MonObject()) ;
        test.add(new MonObject()) ;
        test.add(new MonObject()) ;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le lancement de l&amp;rsquo;agent se fait de la mÃªme maniÃ¨re qu&amp;rsquo;auparavant. Cependant, celui-ci apporte une dÃ©pendance supplÃ©mentaire, Javassist, au runtime.
Il faut donc que celui-ci soit disponible dans le classpath :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -classpath &amp;quot;path/to/javassist-3.14.0-GA.jar:./&amp;quot; -javaagent:AgentSimple.jar=&amp;quot;Mes paramÃ¨tres&amp;quot; be.hikage.agent.TestMain
Hello, Agent Smith ! [ Mes paramÃ¨tres]
java/lang/Enum : 1
sun/launcher/LauncherHelper : 1
Mon Programme
be/hikage/agent/MonObject : 1
be/hikage/agent/MonObject : 2
be/hikage/agent/MonObject : 3
be/hikage/agent/MonObject : 4
java/lang/Shutdown$Lock : 1
java/lang/Shutdown$Lock : 2
java/lang/Shutdown$Lock : 3
java/lang/Shutdown$Lock : 4
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Les Agents Java sont assez simple Ã  mettre en place, et les possibilitÃ©s sont assez nombreuses.
Cependant, cela nÃ©cessite d&amp;rsquo;avoir dÃ©clarer celui-ci au dÃ©marrage de l&amp;rsquo;application.&lt;/p&gt;

&lt;p&gt;Et parfois, on aimerait avoir la possibilitÃ© d&amp;rsquo;activer un agent plus tard, au besoin.
Pour cela, il existe une API, l&amp;rsquo;Attach API.
Celle-ci fera l&amp;rsquo;objet d&amp;rsquo;un prochain article.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>