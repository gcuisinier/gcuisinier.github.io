<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Opensource on Gildas Cuisinier</title>
    <link>http://example.org/categories/opensource/</link>
    <description>Recent content in Opensource on Gildas Cuisinier</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Mar 2012 08:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://example.org/categories/opensource/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Présentation de xdt4j</title>
      <link>http://example.org/blog/2012/03/pr%C3%A9sentation-de-xdt4j/</link>
      <pubDate>Thu, 15 Mar 2012 08:00:00 +0100</pubDate>
      
      <guid>http://example.org/blog/2012/03/pr%C3%A9sentation-de-xdt4j/</guid>
      <description>Introduction Chez mon client, nous avons eu un besoin particulier : celui de pouvoir étendre des archetypes Maven. Autrement dit, pouvoir créer un archetype qui se baserait sur un autre, et qui apporterait uniquement le delta de différence.
Pour certain fichier, nous n&amp;rsquo;avons pas eu le choix, nous avons été obliger de fournir une nouvelle version qui remplacerait la version initiale, par exemple les fichiers binaires tels que les images.</description>
    </item>
    
    <item>
      <title>Projet de modèle de configuration Spring</title>
      <link>http://example.org/blog/2010/04/projet-de-mod%C3%A8le-de-configuration-spring/</link>
      <pubDate>Thu, 08 Apr 2010 08:00:00 +0100</pubDate>
      
      <guid>http://example.org/blog/2010/04/projet-de-mod%C3%A8le-de-configuration-spring/</guid>
      <description>&lt;p&gt;##Problème
Sur certains projets, j&amp;rsquo;ai eu l&amp;rsquo;occasion de voir des fichiers de configuration Spring de ce type :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;import resource=&amp;quot;monitoring-environnement1.xml&amp;quot;/&amp;gt;
&amp;lt;import resource=&amp;quot;monitoring-environnement2.xml&amp;quot;/&amp;gt;
&amp;lt;import resource=&amp;quot;monitoring-environnement3.xml&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et bien évidemment, chacun des fichiers de configurations importés était tous semblables, avec comme seule différence les noms de beans Spring ou des valeurs de propriétés.
Si demain, un nouvel environnement devait être ajouté, je vous le donne dans le mille : un copier / coller, un s/environnement1/nouvel-environnement/g  !&lt;/p&gt;

&lt;p&gt;Même si cela fonctionne bien, ce n&amp;rsquo;est pas la solution la plus propre : Si le système de monitoring devait être modifié, il faudrait éditer X fichiers, avec le risque d&amp;rsquo;oublier un fichier, ou un valeur&amp;hellip;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>