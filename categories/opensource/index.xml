<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenSource on Gildas Cuisinier</title>
    <link>https://www.gcuisinier.net/categories/opensource/</link>
    <description>Recent content in OpenSource on Gildas Cuisinier</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Mar 2012 08:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://www.gcuisinier.net/categories/opensource/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Présentation de xdt4j</title>
      <link>https://www.gcuisinier.net/blog/2012/03/pr%C3%A9sentation-de-xdt4j/</link>
      <pubDate>Thu, 15 Mar 2012 08:00:00 +0100</pubDate>
      
      <guid>https://www.gcuisinier.net/blog/2012/03/pr%C3%A9sentation-de-xdt4j/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Chez mon client, nous avons eu un besoin particulier : celui de pouvoir étendre des archetypes Maven.
Autrement dit, pouvoir créer un archetype qui se baserait sur un autre, et qui apporterait uniquement le delta de différence.&lt;/p&gt;
&lt;p&gt;Pour certain fichier, nous n&amp;rsquo;avons pas eu le choix, nous avons été obliger de fournir une nouvelle version qui remplacerait la version initiale, par exemple les fichiers binaires tels que les images.&lt;/p&gt;
&lt;p&gt;Par contre, pour le fichiers XML, et en particulier les fichiers pom.xml ou encore le fichier archetype-metadata.xml, c&amp;rsquo;était plus problématique. En effet, en cas de modification de l&amp;rsquo;un des ces fichiers dans l&amp;rsquo;archetype de base, nous aurions été obligé de copier ceux-ci, et ré-introduire les delta à la main&amp;hellip; ce qui ne serait pas très productifs.&lt;/p&gt;
&lt;p&gt;Partant du fait que ces fichiers sont du XML, il me semblait plus logique de partir du fichier de base et de ne décrire que les transformations à lui apporter. Quand on parle de transformation en XML, on pense tout de suite à XSLT. 
Mais il faut avouer que s&amp;rsquo;il est très puissant, il n&amp;rsquo;est pas forcément le plus simple à appréhender.&lt;/p&gt;
&lt;p&gt;J&amp;rsquo;ai donc cherché des alternatives plus simples. En discutant avec un consultant .Net, celui-ci m&amp;rsquo;a présenté le système qui est utilisé par Microsoft pour gérer les fichiers de configuration de IIS : XML Document Transform.
J&amp;rsquo;ai tout de suite trouvé cette solution élégante pour répondre à notre problème.&lt;/p&gt;
&lt;p&gt;Par chance, quelqu&amp;rsquo;un a eu la bonne idée de faire une première implémentation OpenSource (&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; en se basant sur tout les exemples qu&amp;rsquo;il à trouvé dans la documentation et sur internet.
Son implémentation se basait sur des spécificités .Net, donc impossible de le porter tel quel en Java.
Cependant, son jeu de test était assez complet.&lt;/p&gt;
&lt;p&gt;Grâce à celui-ci tests, j&amp;rsquo;ai pu développer en TDD une implémentation en Java : &lt;!-- raw HTML omitted --&gt;xdt4j&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Projet de modèle de configuration Spring</title>
      <link>https://www.gcuisinier.net/blog/2010/04/projet-de-mod%C3%A8le-de-configuration-spring/</link>
      <pubDate>Thu, 08 Apr 2010 08:00:00 +0100</pubDate>
      
      <guid>https://www.gcuisinier.net/blog/2010/04/projet-de-mod%C3%A8le-de-configuration-spring/</guid>
      <description>&lt;h2 id=&#34;problème&#34;&gt;Problème&lt;/h2&gt;
&lt;p&gt;Sur certains projets, j&amp;rsquo;ai eu l&amp;rsquo;occasion de voir des fichiers de configuration Spring de ce type :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resource=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;monitoring-environnement1.xml&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resource=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;monitoring-environnement2.xml&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resource=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;monitoring-environnement3.xml&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Et bien évidemment, chacun des fichiers de configurations importés était tous semblables, avec comme seule différence les noms de beans Spring ou des valeurs de propriétés.
Si demain, un nouvel environnement devait être ajouté, je vous le donne dans le mille : un copier / coller, un s/environnement1/nouvel-environnement/g  !&lt;/p&gt;
&lt;p&gt;Même si cela fonctionne bien, ce n&amp;rsquo;est pas la solution la plus propre : Si le système de monitoring devait être modifié, il faudrait éditer X fichiers, avec le risque d&amp;rsquo;oublier un fichier, ou un valeur&amp;hellip;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>